{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500,
                },
            },
        },
      "AVG":
        {
          "hint":
            [
              {
                "title": "Type of elements and instruction set",
                "txt": "8 AVX-512 instructions are processing arithmetic or math operations on double precision FP elements in vector mode (eight at a time).\n",
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 128 FP arithmetical operations:\n - 64: addition or subtraction (all inside FMA instructions)\n - 64: multiply (all inside FMA instructions)\nThe binary loop is loading 1024 bytes (128 double precision FP elements).",
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.12 FP operations per loaded or stored byte.",
              },
              {
                "workaround": "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually. Or by recompiling with -funroll-loops and/or -floop-unroll-and-jam. Or with the unroll (resp. unroll_and_jam) directive on top of the inner (resp. surrounding) loop. You can enforce an unroll factor: #pragma GCC unroll N",
                "title": "Unroll opportunity",
                "txt": "Loop is data access bound.",
              },
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 19\nnb uops            : 18\nloop length        : 139\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 0\nused ymm registers : 0\nused zmm registers : 9\nnb stack references: 0\n",
              },
              {
                "title": "Front-end",
                "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 5.20 cycles\nfront end            : 5.20 cycles\n",
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 8.00 | 0.50 | 8.00 | 8.00 | 0.00 | 0.50 | 1.00 | 0.00 | 0.00 | 0.00\ncycles | 8.00 | 8.00 | 8.00 | 8.00 | 0.00 | 0.50 | 1.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 32.00\n",
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 5.20\nDispatch  : 8.00\nData deps.: 32.00\nOverall L1: 32.00\n",
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 100%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
              },
              {
                "title": "Vector efficiency ratios",
                "txt": "all     : 100%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 32.00 cycles. At this rate:\n - 25% of peak load performance is reached (32.00 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
              },
              {
                "title": "Front-end bottlenecks",
                "txt": "Found no such bottlenecks.",
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 1c49\n\nInstruction                                 | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------\nVMOVAPD (%R15,%RDI,8),%ZMM9                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x40(%R15,%RDI,8),%ZMM10            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD (%R14,%RDI,8),%ZMM9,%ZMM0       | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVMOVAPD 0x80(%R15,%RDI,8),%ZMM11            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0xc0(%R15,%RDI,8),%ZMM12            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x100(%R15,%RDI,8),%ZMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x140(%R15,%RDI,8),%ZMM14           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD 0x40(%R14,%RDI,8),%ZMM10,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVMOVAPD 0x180(%R15,%RDI,8),%ZMM15           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x1c0(%R15,%RDI,8),%ZMM1            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD 0x80(%R14,%RDI,8),%ZMM11,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0xc0(%R14,%RDI,8),%ZMM12,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x100(%R14,%RDI,8),%ZMM13,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x140(%R14,%RDI,8),%ZMM14,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x180(%R14,%RDI,8),%ZMM15,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x1c0(%R14,%RDI,8),%ZMM1,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nADD $0x40,%RDI                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25\nCMP %RDI,%RAX                               | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25\nJA 1c49 <scalar_product._omp_fn.0+0x159>    | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1\n",
              },
            ],
          "header":
            [
            "12% of peak computational performance is used (4.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
            ],
          "brief":
            [
            ],
          "gain":
            [
              {
                "details": "All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).\n",
                "title": "Vectorization",
                "txt": "Your loop is fully vectorized, using full register length.\n",
              },
              {
                "title": "Execution units bottlenecks",
                "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
              },
            ],
          "potential":
            [
              {
                "title": "FMA",
                "txt": "Detected 64 FMA (fused multiply-add) operations.",
              },
            ],
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "title": "Type of elements and instruction set",
                  "txt": "8 AVX-512 instructions are processing arithmetic or math operations on double precision FP elements in vector mode (eight at a time).\n",
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 128 FP arithmetical operations:\n - 64: addition or subtraction (all inside FMA instructions)\n - 64: multiply (all inside FMA instructions)\nThe binary loop is loading 1024 bytes (128 double precision FP elements).",
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.12 FP operations per loaded or stored byte.",
                },
                {
                  "workaround": "Unroll your loop if trip count is significantly higher than target unroll factor and if some data references are common to consecutive iterations. This can be done manually. Or by recompiling with -funroll-loops and/or -floop-unroll-and-jam. Or with the unroll (resp. unroll_and_jam) directive on top of the inner (resp. surrounding) loop. You can enforce an unroll factor: #pragma GCC unroll N",
                  "title": "Unroll opportunity",
                  "txt": "Loop is data access bound.",
                },
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 19\nnb uops            : 18\nloop length        : 139\nused x86 registers : 4\nused mmx registers : 0\nused xmm registers : 0\nused ymm registers : 0\nused zmm registers : 9\nnb stack references: 0\n",
                },
                {
                  "title": "Front-end",
                  "txt": "ASSUMED MACRO FUSION\nFIT IN UOP CACHE\nmicro-operation queue: 5.20 cycles\nfront end            : 5.20 cycles\n",
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9\n----------------------------------------------------------------------------\nuops   | 8.00 | 0.50 | 8.00 | 8.00 | 0.00 | 0.50 | 1.00 | 0.00 | 0.00 | 0.00\ncycles | 8.00 | 8.00 | 8.00 | 8.00 | 0.00 | 0.50 | 1.00 | 0.00 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0 (256 bits): VPU, ALU, DIV/SQRT\n - P1 (256 bits): ALU, VPU\n - P2 (512 bits): load\n - P3 (512 bits): load\n - P4 (256 bits): store data\n - P5 (512 bits): ALU, VPU\n - P6: ALU\n - P7: store address\n - P8: store address\n - P9 (256 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 32.00\n",
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.20\nDispatch  : 8.00\nData deps.: 32.00\nOverall L1: 32.00\n",
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 100%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
                },
                {
                  "title": "Vector efficiency ratios",
                  "txt": "all     : 100%\nload    : 100%\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 100%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\n",
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 32.00 cycles. At this rate:\n - 25% of peak load performance is reached (32.00 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))\n",
                },
                {
                  "title": "Front-end bottlenecks",
                  "txt": "Found no such bottlenecks.",
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 1c49\n\nInstruction                                 | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput\n-----------------------------------------------------------------------------------------------------------------------------------------------\nVMOVAPD (%R15,%RDI,8),%ZMM9                 | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x40(%R15,%RDI,8),%ZMM10            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD (%R14,%RDI,8),%ZMM9,%ZMM0       | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVMOVAPD 0x80(%R15,%RDI,8),%ZMM11            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0xc0(%R15,%RDI,8),%ZMM12            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x100(%R15,%RDI,8),%ZMM13           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x140(%R15,%RDI,8),%ZMM14           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD 0x40(%R14,%RDI,8),%ZMM10,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVMOVAPD 0x180(%R15,%RDI,8),%ZMM15           | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVMOVAPD 0x1c0(%R15,%RDI,8),%ZMM1            | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50\nVFMADD231PD 0x80(%R14,%RDI,8),%ZMM11,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0xc0(%R14,%RDI,8),%ZMM12,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x100(%R14,%RDI,8),%ZMM13,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x140(%R14,%RDI,8),%ZMM14,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x180(%R14,%RDI,8),%ZMM15,%ZMM0 | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nVFMADD231PD 0x1c0(%R14,%RDI,8),%ZMM1,%ZMM0  | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1\nADD $0x40,%RDI                              | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25\nCMP %RDI,%RAX                               | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25\nJA 1c49 <scalar_product._omp_fn.0+0x159>    | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50-1\n",
                },
              ],
            "header":
              [
              "12% of peak computational performance is used (4.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))",
              ],
            "brief":
              [
              ],
            "gain":
              [
                {
                  "details": "All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).\n",
                  "title": "Vectorization",
                  "txt": "Your loop is fully vectorized, using full register length.\n",
                },
                {
                  "title": "Execution units bottlenecks",
                  "txt": "Found no such bottlenecks but see expert reports for more complex bottlenecks.",
                },
              ],
            "potential":
              [
                {
                  "title": "FMA",
                  "txt": "Detected 64 FMA (fused multiply-add) operations.",
                },
              ],
          },
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /usr/lib/gcc/x86_64-linux-gnu/11/include/avx512fintrin.h:12528.\n",
            "The related source loop is not unrolled or unrolled with no peel/tail loop.",
            ],
          "nb_paths": 1,
        },
    },
}
